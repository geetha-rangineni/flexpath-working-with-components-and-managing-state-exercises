Exercise 1: Creating a Functional Component

Description: 

Create a simple functional component named `Greeting` that 
accepts a 'name' prop and displays "Hello, {name}!".
Display this component in App.jsx.


Exercise 2: Component Hierarchy

Description: 

Build a component hierarchy with a parent component `Dashboard` that 
renders child components `UserProfile` and `UserStats`.
Display this component in App.jsx.


Exercise 3: Passing Data with Props

Description: 

Modify `UserProfile` to accept a 'user' prop and 
display the user's name and age.



Exercise 4: Using useState Hook

Description: 

Create a `Counter` component that displays a 'count' and 
has buttons to increment and decrement the 'count'.
Display this component in App.jsx.


Exercise 5: Handling State Changes

Description: 

Explain how state changes in the `Counter` component cause re-rendering.


Answer:
In React, state is managed using the useState hook. When state changes, React automatically re-renders the component thatâ€™s how your UI stays in sync with the data.


Exercise 6: Avoiding Prop Drilling with Context

Description: 

Create a `ThemeContext` to manage a theme state and 
use it in a deeply nested component without passing props through 
intermediate components.
Display the deeply nested component in App.jsx.


Exercise 7: Understanding React Context

Description: 

Discuss the benefits and drawbacks of using React `Context`.



Exercise 8: Using useEffect Hook

Description: 

Create a `Timer` component that uses `useEffect` to update 
the time every second.
Display this component in App.jsx.


Exercise 9: Managing Component Lifecycle

Description: 

Explain how `useEffect` manages the lifecycle of functional components.



Exercise 10: Creating a Higher-Order Component (HOC)

Description: 

Implement an HOC named `withLoading` that shows 
a loading indicator while data is being fetched.
Display this component in action in App.jsx.


Exercise 11: Benefits and Limitations of HOCs

Description: 

Discuss the use cases and limitations of Higher-Order Components.



Exercise 12: Implementing Error Boundaries

Description: 

Create an error boundary component to catch errors in the component tree.
Display this component in action in App.jsx.


Exercise 13: Debugging with React DevTools

Description: 

Explain how to use React DevTools to inspect components and their state.



Exercise 14: Diagnosing Performance Issues

Description: 

Explain how to use the React Profiler to identify and optimize slow components.



Exercise 15: Integrating Next.js

Description: 

Briefly explain how to integrate Next.js for server-side rendering.



Exercise 16: Code Splitting with React.lazy

Description: 

Implement lazy loading of components to improve performance.
Display this behavior for some of the components in App.jsx.


Exercise 17: Memoization with React.memo

Description: 

Use React.memo to prevent unnecessary re-renders of pure components.
Display this behavior for some of the components in App.jsx.


Exercise 18: Optimizing Expensive Calculations with useMemo

Description: 

Use `useMemo` to memoize this expensive JavaScript function and display its
result. 

```
const computeFactorial = (n) => (n <= 1 ? 1 : n * computeFactorial(n - 1));
return computeFactorial(number);
```

Create a button that runs this function for the next number (n + 1) 
each time it is clicked and displays the result in the App.jsx component.



Exercise 19: Using useCallback for Function Memoization

Description: 

Prevent unnecessary re-renders by memoizing event handlers with useCallback.
Display this behavior for some of the components in App.jsx.


Exercise 20: Custom Hooks

Description: 

Create a custom hook useWindowWidth that returns the current window width.
Display the current window width in App.jsx using this hook.



Exercise 21: Error Handling in Event Handlers

Description: 

Show how errors in event handlers do not propagate to 
error boundaries and how to handle them.
Display this behavior in App.jsx.

